using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PathfindingTester : MonoBehaviour
{

    // The A* manager.
    private AStarManager AStarManager = new AStarManager();

    // Array of possible waypoints.
    List<GameObject> Waypoints = new List<GameObject>();    
    List<GameObject> starWaypoints = new List<GameObject>();
    List<GameObject> antWaypoints = new List<GameObject>();

    // Array of waypoint map connections. Represents a path.
    List<Connection> ConnectionArray = new List<Connection>();

    // Getting Rigidbody Component
    private Rigidbody rb;


    // The start and end target point.
    public GameObject start;
    public List<GameObject> goalNodes = new List<GameObject>();

    // Debug line offset.
    Vector3 OffSet = new Vector3(0, 0.3f, 0);

    //Timer 
    private float startTime;
    private bool isCounting = true;
    private bool isAgentMoving = true;

    // The ACO Controller.
    ACOCON MyACOCON = new ACOCON();

    // Array of possible waypoints.
    List<GameObject> ACOWaypoints = new List<GameObject>();

    // Connections between nodes.
    private List<ACOConnection> starConnections = new List<ACOConnection>();
    private List<ACOConnection> antConnections = new List<ACOConnection>();

    // The route generated by the ACO algorith.
    private List<ACOConnection> MyRoute = new List<ACOConnection>();
    // The max length of a path created by the ACO.

    //IterationThreshold = Max number of iterations.
    public int iterationThreshold = 150;

    //TotalNumAnts = Total number of ants in the simulation.
    public int totalNumAnts = 50;

    //MaxPathLength = The max length of a path created by the ACO.
    public int MaxPathLength = 20;
    
    // Loop counter
    int current=0;
    float sd,Speed;
    // Car speed
    public float speed = 20f;
    private int count;
    private int countit;
    private int parcels;
    public Text agentStats;
    public Text agentStats1;
    public float turningSpeed = 5f;



    // Start is called before the first frame update

    void Start()
    {

        if (start == null || goalNodes == null)
        {
            Debug.Log("No start or goal waypoints.");
            return;
        }

        // Find all the waypoints in the level.
        GameObject[] GameObjectsWithWaypointTag;
        GameObjectsWithWaypointTag = GameObject.FindGameObjectsWithTag("Waypoint");

        // A* points
        foreach (GameObject waypoint in GameObjectsWithWaypointTag)
        {
            WaypointCON tmpWaypointCon = waypoint.GetComponent<WaypointCON>();
            if (tmpWaypointCon)
            {
                starWaypoints.Add(waypoint);
            }
        }

        // Go through the waypoints and create connections.
        foreach (GameObject waypoint in starWaypoints)
        {
            WaypointCON tmpWaypointCon = waypoint.GetComponent<WaypointCON>();

            // Loop through a waypoints connections.
            foreach (GameObject WaypointConNode in tmpWaypointCon.Connections)
            {
                Connection aConnection = new Connection();
                aConnection.SetFromNode(waypoint);
                aConnection.SetToNode(WaypointConNode);
                AStarManager.AddConnection(aConnection);
            }
        }

        // Start functions for ant colony simulation
        // *************************************************************
        // Find all the waypoints in the level.

        // ACO waypoins
        foreach (GameObject goal in goalNodes)
        {
            antWaypoints.Add(goal);
        }
        antWaypoints.Add(start);


        // Go through the waypoints and create connections.
        foreach (GameObject waypoint in antWaypoints)
        {

            foreach (GameObject waypoint2 in antWaypoints)
            {
                if (waypoint != waypoint2)
                {
                    ACOConnection acoConnection = new ACOConnection();
                    acoConnection.SetConnection(waypoint, waypoint2, MyACOCON.GetDefaultPheromone());
                    antConnections.Add(acoConnection);
                }
            }
        }
        // storing overall speed in Speed variable
        Speed = speed;


        // Run ACO
        MyRoute = MyACOCON.ACO(iterationThreshold, totalNumAnts, antWaypoints.ToArray(), antConnections, start, MaxPathLength);


        // A* manager
        foreach (ACOConnection route in MyRoute)
        {
            ConnectionArray.AddRange(AStarManager.PathfindAStar(route.GetFromNode(), route.GetToNode()));
        }


    }
       // Update is called once per frame
    void Update()
    {
        sd = speed;
        agentStats.text = "Packages: " + parcels;
        agentStats1.text = "Speed: " + speed + " m/s";
    }

    //Fixed Update
    void FixedUpdate()
    {

          if (isAgentMoving && current < ConnectionArray.Count)
        {

            if (transform.position != ConnectionArray[current].GetToNode().transform.position)

            {
                Vector3 pos2 = Vector3.MoveTowards(transform.position, ConnectionArray[current].GetToNode().transform.position, speed * Time.deltaTime);
                var lookpos = ConnectionArray[current].GetToNode().transform.position - transform.position;
                lookpos.y = 0;
                transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.LookRotation(lookpos), turningSpeed * Time.deltaTime);
                GetComponent<Rigidbody>().MovePosition(pos2);

            }
            else
            {
                current++;

                if (transform.position == start.transform.position)
                {


                    agentStats1.text = "Speed: 0 m/s";
                    // resetting counter
                    current = 0;
 
                      isAgentMoving = false;             }
            }
        }
       
        
    }
 
    void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("PickUp"))
        {
            
            other.gameObject.SetActive(false);
            parcels++;
                     if(parcels >= 9){
            speed = Speed - (float)0.9 * speed;
        }else{
            speed = Speed - (float)parcels/10*speed;
        }
            
        }
    }

  
}

